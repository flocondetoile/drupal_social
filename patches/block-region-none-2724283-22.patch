diff --git a/core/modules/block/src/BlockInterface.php b/core/modules/block/src/BlockInterface.php
index bd46671..f1df1c8 100644
--- a/core/modules/block/src/BlockInterface.php
+++ b/core/modules/block/src/BlockInterface.php
@@ -17,7 +17,7 @@
   /**
    * Denotes that a block is not enabled in any region and should not be shown.
    */
-  const BLOCK_REGION_NONE = -1;
+  const BLOCK_REGION_NONE = '-1';

   /**
    * Returns the plugin instance.
diff --git a/core/modules/block/tests/src/Kernel/BlockRebuildTest.php b/core/modules/block/tests/src/Kernel/BlockRebuildTest.php
new file mode 100644
index 0000000..ce8cd69
--- /dev/null
+++ b/core/modules/block/tests/src/Kernel/BlockRebuildTest.php
@@ -0,0 +1,78 @@
+<?php
+
+namespace Drupal\Tests\block\Kernel;
+
+use Drupal\block\BlockInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\KernelTests\KernelTestBase;
+use Drupal\simpletest\BlockCreationTrait;
+
+/**
+ * Tests block_rebuild().
+ *
+ * @group block
+ */
+class BlockRebuildTest extends KernelTestBase {
+
+  use BlockCreationTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $modules = ['block', 'system'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    $this->container->get('theme_installer')->install(['stable', 'classy']);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function setUpBeforeClass() {
+    parent::setUpBeforeClass();
+
+    // @todo Once block_rebuild() is refactored to auto-loadable code, remove
+    //   this require statement.
+    require_once static::getDrupalRoot() . '/core/modules/block/block.module';
+  }
+
+  /**
+   * @covers ::block_rebuild
+   */
+  public function testRebuildNoBlocks() {
+    block_rebuild();
+    $messages = drupal_get_messages();
+    $this->assertEquals([], $messages);
+  }
+
+  /**
+   * @covers ::block_rebuild
+   */
+  public function testRebuildNoInvalidBlocks() {
+    $this->placeBlock('system_powered_by_block', ['region' => 'content', 'theme' => 'classy']);
+    $this->placeBlock('system_powered_by_block', ['region' => BlockInterface::BLOCK_REGION_NONE, 'theme' => 'classy']);
+
+    block_rebuild();
+    $messages = drupal_get_messages();
+    $this->assertEquals([], $messages);
+  }
+
+  /**
+   * @covers ::block_rebuild
+   */
+  public function testRebuildInvalidBlocks() {
+    $this->placeBlock('system_powered_by_block', ['region' => 'content', 'theme' => 'classy']);
+    $block = $this->placeBlock('system_powered_by_block', ['region' => 'INVALID', 'theme' => 'classy']);
+
+    block_rebuild();
+    $messages = drupal_get_messages();
+    $expected = ['warning' => [new TranslatableMarkup('The block %info was assigned to the invalid region %region and has been disabled.', ['%info' => $block->id(), '%region' => 'INVALID'])]];
+    $this->assertEquals($expected, $messages);
+  }
+
+}
diff --git a/core/modules/block/tests/src/Kernel/BlockStorageUnitTest.php b/core/modules/block/tests/src/Kernel/BlockStorageUnitTest.php
index 6dfc66c..c7c6b60 100644
--- a/core/modules/block/tests/src/Kernel/BlockStorageUnitTest.php
+++ b/core/modules/block/tests/src/Kernel/BlockStorageUnitTest.php
@@ -84,7 +84,7 @@ protected function createTests() {
       'dependencies' => array('module' => array('block_test'), 'theme' => array('stark')),
       'id' => 'test_block',
       'theme' => 'stark',
-      'region' => '-1',
+      'region' => BlockInterface::BLOCK_REGION_NONE,
       'weight' => NULL,
       'provider' => NULL,
       'plugin' => 'test_html',
@@ -111,7 +111,7 @@ protected function loadTests() {
     $this->assertTrue($entity instanceof Block, 'The loaded entity is a Block.');

     // Verify several properties of the block.
-    $this->assertEqual($entity->getRegion(), '-1');
+    $this->assertEqual($entity->getRegion(), BlockInterface::BLOCK_REGION_NONE);
     $this->assertTrue($entity->status());
     $this->assertEqual($entity->getTheme(), 'stark');
     $this->assertTrue($entity->uuid());
